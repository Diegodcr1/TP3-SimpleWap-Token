
üñ•Ô∏è Frontend Integration Guide: SimpleSwap2
SimpleSwap2 is a lightweight decentralized exchange (DEX) smart contract that lets users:

Add and remove liquidity between two ERC20 tokens

Swap one token for another

Mint and burn LP (liquidity provider) tokens as proof of pool ownership

Retrieve real-time price and swap estimates

üí° Key Contract Functions and How to Use Them
1. addLiquidity(...)
Adds tokenA and tokenB to the liquidity pool. Mints LP tokens to the user.

Frontend Requirements:

Get input amounts from the user (amountADesired, amountBDesired)

Ask for slippage tolerance (amountAMin, amountBMin)

User must approve() both tokens beforehand

Estimate deadline (e.g., Date.now() / 1000 + 1800)

Call .send({ from: userAddress }) on addLiquidity(...)

2. removeLiquidity(...)
Burns LP tokens and returns corresponding amounts of tokenA and tokenB.

Frontend Flow:

Input: liquidityAmount, slippage mins, to, deadline

Use balanceOf() to fetch user LP balance

Requires LP approve() if handled through a frontend

Returns amountA and amountB withdrawn

3. swapExactTokensForTokens(...)
Swaps a fixed amount of tokenIn for the maximum possible of tokenOut.

Frontend Flow:

Inputs: tokenIn, tokenOut, amountIn, amountOutMin, to, deadline

Use getAmountOut(...) to calculate and preview expected output

Ensure approve() is called for tokenIn

Displays final received amount upon success

4. getAmountOut(...)
Returns the output estimate of a swap without executing it.

Frontend Use:

Useful for live estimates during user input

Recalculates on input change (amount or token pair)

Supports building slippage calculators

5. getPrice(...)
Returns real-time price data between tokenA and tokenB, both directions.

Frontend Use Cases:

Display current exchange rate on liquidity and swap pages

Graph token prices over time (if queried historically off-chain)

üîê Behind the Scenes
sqrt(...): Internal method used to determine how many LP tokens to mint

Token sorting (tokenX, tokenY) ensures pools are indexed consistently

Liquidity share is based on the geometric mean of token amounts deposited
