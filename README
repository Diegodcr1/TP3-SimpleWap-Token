üìù SimpleSwap2

Overview

SimpleSwap2 is a smart contract implemented on Solidity that allows users to trade two ERC-20 tokens and provide liquidity to receive LP tokens. 
This contract mimics a Uniswap V-type automated exchange (AMM) model, with some simplifications.

‚öôÔ∏è What does the contract do?

It allows users to:

Add and withdraw liquidity from a pool composed of two ERC-20 tokens.
Exchange one token for another using a constant product formula (x * y = k).
Receive LP tokens as a representation of their participation in liquidity.
Calculate the relative prices between two tokens.
Provides output estimates for swaps using the contract's reserves.

üõ†Ô∏è How does it do it?

Use the Automated Market Maker (AMM) model without the need for an order book.
When adding initial liquidity, the inter-token ratio is set as the base of the pool.
In swaps, the expected output amount is calculated with:

solidity
amountOut = (amountIn * reserveOut) / (amountIn + reserveIn)
Slippage is controlled using minimum parameters (amountAMin, amountOutMin, etc.).

There is no swap fee charged by default (but it could easily be extended).

üìö Features and Interfaces

Function: addLiquidity	 
Description: It adds two-token liquidity to the pool.           
Entrance: tokenA, tokenB, desired and minimum amounts, receiving address, deadline	 
Exit: amountA, amountB, liquidity


Function: removeLiquidity        
Description: Withdraw liquidity and proportionally return A and B tokens.	  
Entrance:Entrance	tokenA, tokenB, number of LP tokens, minimums, recipient, deadline	
Exit: amountA, amountB


Function: swapExactTokensForTokens
Description: Exchange an exact amount of token A for the largest possible amount of token B.	
Entrance: amountIn, amountOutMin, path, destino, deadline	
Exit: amounts (input y output)


Function: getPrice	
Description: It returns the relative price between two tokens.	
Entrance: Tokena, Tokenb
Exit: price



Function: getAmountOut	
Description: Estimates the outcome of a given swap , and .amountInreserveInreserveOut
Entrance: amountIn, reserveIn, reserveOut
Exit: amountOut
